version: '3'

silent: true

vars:
    # DOCKER: docker
    # DOCKER_COMPOSE: docker compose
    # DOCKER_COMPOSE_STOP: "{{.DOCKER_COMPOSE}} stop"
    # DOCKER_COMPOSE_UP: "{{.DOCKER_COMPOSE}} up"
    # DOCKER_RUN: "{{.DOCKER}} run"
    # PHPQA: jakzal/phpqa
    # PHPQA_RUN: "{{.DOCKER_RUN}} --init -it --rm -v {{.PWD}}:/project -w /project {{.PHPQA}}"
    # PWD: $PWD
    COMPOSER: composer
    GREETING: "Hello, Welcome to Symfony And Docker Taskfile !"
    NPM: npm
    PHPUNIT: "APP_ENV=test {{.SYMFONY}} php bin/phpunit"
    SYMFONY: symfony
    SYMFONY_CONSOLE: "{{.SYMFONY}} console"

tasks:
    default:
        cmds:
            - task: help

    help:
        desc: Display this help
        cmds:
            - echo "{{.GREETING}}"
            - task --list

    ### COMPOSER
    cc:
        desc: "Clears composer's internal package cache"
        cmds:
            - "{{.COMPOSER}} clear-cache"
    ci:
        desc: "Install composer dependencies"
        cmds:
            - "{{.COMPOSER}} install"
    csu:
        desc: "Install composer dependencies"
        cmds:
            - "{{.COMPOSER}} self-update"
    cu:
        desc: "Update composer dependencies"
        cmds:
            - "{{.COMPOSER}} update"
    cri:
        desc: "Uninstalls and reinstalls the given package names"
        cmds:
            - "{{.COMPOSER}} reinstall"
    cv:
        desc: Validate composer.json file.
        cmds:
            - "{{.COMPOSER}} validate"
    cvd:
        desc: Validate composer.json and composer.lock files in strict mode.
        cmds:
            - "{{.COMPOSER}} validate --strict --check-lock"

    ### SYMFONY
    check-requirements:
        desc: "Check symfony requirements"
        cmds:
            - "{{.SYMFONY}} check:requirements"
    # CONSOLE
    scc:
        desc: "Clear symfony cache"
        cmds:
            - "{{.SYMFONY_CONSOLE}} cache:clear"
    # Database & Doctrine
    dc:
        desc: "Create symfony database"
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:database:create --if-not-exists"
    dd:
        desc: "Drop symfony database"
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:database:drop --if-exists --force"
    du:
        desc: "Update symfony schema database"
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:schema:update --force"  
    dmd:
        desc: "Generate a migration by comparing your current database to your mapping information."
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:migrations:diff --no-interaction"
    dmm:
        desc: "Execute a migration to the latest available version."
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:migrations:migrate --no-interaction"
    dmmp:
        desc: "Execute a migration to a specified version."
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:migrations:migrate prev --no-interaction"
    fixtures:
        desc: "Load fixtures"
        cmds:
            - "{{.SYMFONY_CONSOLE}} doctrine:fixtures:load --no-interaction"
    # Maker
    mm:
        desc: "Make symfony migration"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:migration"
    me:
        desc: "Make entity"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:entity"  
    mcmd:
        desc: "Make command"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:command"  
    mc:
        desc: "Make controller"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:controller"  
    mf:
        desc: "Make form"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:form"  
    mfix:
        desc: "Make fixtures"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:fixtures"  
    tc:
        desc: "Make twig-component"
        cmds:
            - "{{.SYMFONY_CONSOLE}} make:twig-component"  
    # Debug
    dump-env:
        desc: "Dump env"
        cmds:
            - "{{.SYMFONY_CONSOLE}} debug:dotenv"
    dump-env-container:
        desc: "Dump env container"
        cmds:
            - "{{.SYMFONY_CONSOLE}} debug:container --env-vars"
    dump-router:
        desc: "Dump routes"
        cmds:
            - "{{.SYMFONY_CONSOLE}} debug:router"
    # SERVER
    start:
        desc: "Server Symfony Start"
        cmds:
            - "{{.SYMFONY}} local:server:start -d --allow-http"
    stop:
        desc: "Server Symfony Stop"
        cmds:
            - "{{.SYMFONY}} local:server:stop"
    status:
        desc: "Server Symfony Status"
        cmds:
            - "{{.SYMFONY}} local:server:status"
    log:
        desc: "Display symfony logs"
        cmds:
            - "{{.SYMFONY}} local:server:log"
    open:
        desc: "Server Symfony Open"
        cmds:
            - "{{.SYMFONY}} open:local"
    open-webmail:
        desc: "Server Symfony Open Webmail"
        cmds:
            - "{{.SYMFONY}} open:local:webmail"
    secure:
        desc: "Server Certificate Authority for serving HTTPS"
        cmds: 
            - "{{.SYMFONY}} local:server:ca:install"





### CUSTOM
    database:
        desc: "Delete, create database & import datas"
        cmds:
            - task dd
            - task dc
            - task dmm
#            - "{{.SYMFONY_CONSOLE}} asphalt:database:clear"
            - "{{.SYMFONY_CONSOLE}} asphalt:database:all import"
        ignore_error: true
        platforms: [windows/amd64]
    launch:
        desc: "Start Symfony server for local dev"
        cmds:
            - "clear"
            - task secure
            - task start
            - task scc
            - "{{.SYMFONY_CONSOLE}} assets:install"
            - task open
        ignore_error: true
        platforms: [windows/amd64]
    restart:
        desc: "Restart Symfony Server for Local Dev"
        cmds:
            - "clear"
            - task stop
            - task launch
            - task open
        ignore_error: true
        platforms: [windows/amd64]
    complete:
        desc: "Clear Cache, Initialize Database, Start Symfony Server & Open Browser"
        cmds:
            - task database
            - task launch
        ignore_error: true
        platforms: [windows/amd64]
    prod:
        desc: "Clear Cache, Assets"
        cmds:
#            - "{{.SYMFONY_CONSOLE}} assets:install --env prod"
#            - "{{.SYMFONY_CONSOLE}} importmap:update"
#            - "{{.SYMFONY_CONSOLE}} asset-map:compile"
#            - "{{.SYMFONY_CONSOLE}} cache:clear --env prod"
            - "{{.COMPOSER}} run auto-scripts"
            - "{{.SYMFONY_CONSOLE}} cache:pool:clear --all"
            - "{{.SYMFONY_CONSOLE}} asphalt:database:all export"
            - "rm -rf public/cache/"
        ignore_error: true
        platforms: [windows/amd64]
