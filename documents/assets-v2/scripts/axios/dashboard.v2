if (process.env.NODE_ENV === 'development') {
    console.debug('loaded :: Axios');
}

/*
 * Axios
 * Client HTTP basé sur les promesses pour navigateur et node.js
 *
 * @link    : https://axios-http.com/fr/
 * @doc     : https://axios-http.com/docs/intro
 * @type {AxiosStatic}
 */
// import axios from "axios";
const axios = require('axios').default;
/*
 * Sweet Alert 2
 *
 * @link    : https://sweetalert2.github.io/
 */
const Swal = require('sweetalert2')

/*
 * JS ROUTING
 *
 */
// php bin/console fos:js-routing:dump --format=json --target=public/js/fos_js_routes.json
const routes = require('../../../public/js/fos_js_routes.json');
import Routing from '../../../public/bundles/fosjsrouting/js/router.min.js';
Routing.setRoutingData(routes);

export default class Dashboard {
    constructor(inputs) {
        this.inputs = inputs;

        if (this.inputs) {

            this.inputs.forEach(function (input) {

                // Détecte l'évènement "change" et récupère les données
                input.addEventListener('change', function (datas) {

                    // Récupère les données du formulaire
                    let filter = this.closest('.card')
                    let entity = filter.dataset.filters;
                    let id     = datas.target.id;
                    let name   = datas.target.name;
                    let value  = datas.target.value;

                    // Construit l'url
                    let url    = Routing.generate('api_axios_dashboard', { 'id': id });

                    // Query Params
                    let query  = {'id': id, 'name': name, 'value': value, 'entity': entity}

                    // Requête Axios
                    axios.post(url, query)
                        .then(function (response) {
                            Swal.fire({
                                position:   'top-end',
                                icon:       'success',
                                iconColor:  'green',
                                title:      'Database is updated !',
                                text:       null,
                                showConfirmButton: false,
                                // confirmButtonText: 'OK',
                                timer:      750,
                                timerProgressBar: true,
                                width:      400,
                                heightAuto: true
                            })
                            console.debug(response.statusText)
                        })
                        .catch(function (response) {
                            Swal.fire({
                                position:   'top-end',
                                icon:       'error',
                                iconColor:  'red',
                                title:      response.statusText,
                                text:       null,
                                showConfirmButton: false,
                                // confirmButtonText: 'OK',
                                timer:      750,
                                timerProgressBar: true,
                                width:      400,
                                heightAuto: true
                            })
                            // console.error(response)
                        })
                })
            })
        }
    }
}
