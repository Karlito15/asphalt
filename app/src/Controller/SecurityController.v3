<?php

namespace App\Controller\Web;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Contracts\Translation\TranslatorInterface;

#[Route(name: 'app.security.', options: ['expose' => false], methods: ['GET', 'POST'], format: 'html', utf8: true)]
class SecurityController extends AbstractController
{
    public function __construct(
        private readonly TranslatorInterface $translator,
    ) {}

    #[Route(path: '/create-admin-user.php', name: 'app.create.user')]
    public function createAdminUser(EntityManagerInterface $entityManager, UserPasswordHasherInterface $passwordHasher): Response
    {
        $u = new User();
        $u
            ->setUsername('Sako')
            ->setEmail('sako@sako.com')
            ->setPassword($passwordHasher->hashPassword($u, '28032021'))
            ->setRoles(['ROLE_ADMIN'])
            ->setVerified(true)
        ;
        $entityManager->persist($u);
        $entityManager->flush();
        $entityManager->clear();

        // dd('create-admin-user.php');
        return $this->redirectToRoute('app.dashboard.index', [
            '_locale' => 'fr'
        ], Response::HTTP_PERMANENTLY_REDIRECT);
    }

    #[Route(path: '/login.php', name: 'login')]
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        $title = $this->translator->trans('controllerName.login.title');

         if ($this->getUser()) {
             return $this->redirectToRoute('app.dashboard.index');
         }

        // get the login error if there is one
        $error        = $authenticationUtils->getLastAuthenticationError();
        // last username entered by the user
        $lastUsername = $authenticationUtils->getLastUsername();

        return $this->render('@App/commons/login.html.twig', [
            'controller_name' => $title,
            'last_username'   => $lastUsername,
            'error'           => $error
        ]);
    }

    #[Route(path: '/logout.php', name: 'logout')]
    public function logout(): void
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
}
