<?php

namespace App\Command\CRON;

use App\Entity\Garage;
use App\Entity\Statistical;
use App\Feature\CommandFeature;
use App\Feature\StatFeature;
use App\Repository\GarageBooleanRepository;
use App\Repository\GarageRepository;
use App\Repository\StatisticalRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
	name: 'asphalt:cron:stat',
	description: 'Generate Stats',
	aliases: ['a:c:s', 'asphalt-cron-stat'],
	hidden: false,
)]
class StatisticalCommand extends Command
{
	use CommandFeature;
	use StatFeature;

	public function __construct(
		private readonly EntityManagerInterface $manager,
		private readonly GarageRepository $garage,
		private readonly GarageBooleanRepository $boolean,
		private readonly StatisticalRepository $statistical,
	)
	{
		parent::__construct();
	}

	/**
	 * @param InputInterface $input
	 * @param OutputInterface $output
	 * @return int
	 */
	protected function execute(InputInterface $input, OutputInterface $output): int
	{
		// Init Variables
		$io = new SymfonyStyle($input, $output);
		$garages = $this->garage->findAll();
		/* @var Statistical $stat */
		$stats   = $this->manager->getRepository(Statistical::class)->findAll();

		// Truncate Table
		$this->statistical->truncate($stats);

		// Get Datas
		$garage  = $this->setGarageData();
		$upgrade = $this->setLevelUpgradeData($garages);
		$common  = $this->setLevelCommonData($garages);
		$rare    = $this->setLevelRareData($garages);
		$epic    = $this->setLevelEpicData($garages);

		// Save Datas
		foreach ($stats as $stat)
		{
			if ($stat->getLabel() === 'Garage') {
				$stat->setValue(json_encode($garage));
				$this->manager->persist($stat);
			}
			if ($stat->getLabel() === 'Upgrade') {
				$stat->setValue(json_encode($upgrade));
				$this->manager->persist($stat);
			}
			if ($stat->getLabel() === 'Common') {
				$stat->setValue(json_encode($common));
				$this->manager->persist($stat);
			}
			if ($stat->getLabel() === 'Rare') {
				$stat->setValue(json_encode($rare));
				$this->manager->persist($stat);
			}
			if ($stat->getLabel() === 'Epic') {
				$stat->setValue(json_encode($epic));
				$this->manager->persist($stat);
			}
		}

		$entity = new Statistical();
		$entity->setLabel('Garage')->setValue(json_encode($garage));
		$this->manager->persist($entity);

		$entity = new Statistical();
		$entity->setLabel('Upgrade')->setValue(json_encode($upgrade));
		$this->manager->persist($entity);

		$entity = new Statistical();
		$entity->setLabel('Common')->setValue(json_encode($common));
		$this->manager->persist($entity);

		$entity = new Statistical();
		$entity->setLabel('Rare')->setValue(json_encode($rare));
		$this->manager->persist($entity);

		$entity = new Statistical();
		$entity->setLabel('Epic')->setValue(json_encode($epic));
		$this->manager->persist($entity);

		$this->manager->flush();

		// Conclusion
		$io->success('Done !');

		return Command::SUCCESS;
	}

	/**
	 * @return array|int[][]
	 */
	public function setGarageData(): array
	{
		$datas                                 = self::initGarageData();
		$datas['Garage']['D']                  = $this->garage->count(['class' => 'D']);
		$datas['Garage']['C']                  = $this->garage->count(['class' => 'C']);
		$datas['Garage']['B']                  = $this->garage->count(['class' => 'B']);
		$datas['Garage']['A']                  = $this->garage->count(['class' => 'A']);
		$datas['Garage']['S']                  = $this->garage->count(['class' => 'S']);
		$datas['Garage']['Total']              = $this->garage->count([]);
		$datas['Lock']['D']                    = $this->getGarageBoolean('bloquer', 'D');
		$datas['Lock']['C']                    = $this->getGarageBoolean('bloquer', 'C');
		$datas['Lock']['B']                    = $this->getGarageBoolean('bloquer', 'B');
		$datas['Lock']['A']                    = $this->getGarageBoolean('bloquer', 'A');
		$datas['Lock']['S']                    = $this->getGarageBoolean('bloquer', 'S');
		$datas['Lock']['Total']                = $this->boolean->count(['bloquer' => true]);
		$datas['Unlock']['D']                  = $this->getGarageBoolean('debloquer', 'D');
		$datas['Unlock']['C']                  = $this->getGarageBoolean('debloquer', 'C');
		$datas['Unlock']['B']                  = $this->getGarageBoolean('debloquer', 'B');
		$datas['Unlock']['A']                  = $this->getGarageBoolean('debloquer', 'A');
		$datas['Unlock']['S']                  = $this->getGarageBoolean('debloquer', 'S');
		$datas['Unlock']['Total']              = $this->boolean->count(['debloquer' => true]);
		$datas['Full_Blueprint']['D']          = $this->getGarageBoolean('fullBlueprint', 'D');
		$datas['Full_Blueprint']['C']          = $this->getGarageBoolean('fullBlueprint', 'C');
		$datas['Full_Blueprint']['B']          = $this->getGarageBoolean('fullBlueprint', 'B');
		$datas['Full_Blueprint']['A']          = $this->getGarageBoolean('fullBlueprint', 'A');
		$datas['Full_Blueprint']['S']          = $this->getGarageBoolean('fullBlueprint', 'S');
		$datas['Full_Blueprint']['Total']      = $this->boolean->count(['fullBlueprint' => true]);
		$datas['Full_Upgrade']['D']            = $this->getGarageBoolean('fullUpgrade', 'D');
		$datas['Full_Upgrade']['C']            = $this->getGarageBoolean('fullUpgrade', 'C');
		$datas['Full_Upgrade']['B']            = $this->getGarageBoolean('fullUpgrade', 'B');
		$datas['Full_Upgrade']['A']            = $this->getGarageBoolean('fullUpgrade', 'A');
		$datas['Full_Upgrade']['S']            = $this->getGarageBoolean('fullUpgrade', 'S');
		$datas['Full_Upgrade']['Total']        = $this->boolean->count(['fullUpgrade' => true]);
		$datas['Gold']['D']                    = $this->getGarageBoolean('gold', 'D');
		$datas['Gold']['C']                    = $this->getGarageBoolean('gold', 'C');
		$datas['Gold']['B']                    = $this->getGarageBoolean('gold', 'B');
		$datas['Gold']['A']                    = $this->getGarageBoolean('gold', 'A');
		$datas['Gold']['S']                    = $this->getGarageBoolean('gold', 'S');
		$datas['Gold']['Total']                = $this->boolean->count(['gold' => true]);
		$datas['To_Upgrade']['D']              = $this->getGarageBoolean('toUpgrade', 'D');
		$datas['To_Upgrade']['C']              = $this->getGarageBoolean('toUpgrade', 'C');
		$datas['To_Upgrade']['B']              = $this->getGarageBoolean('toUpgrade', 'B');
		$datas['To_Upgrade']['A']              = $this->getGarageBoolean('toUpgrade', 'A');
		$datas['To_Upgrade']['S']              = $this->getGarageBoolean('toUpgrade', 'S');
		$datas['To_Upgrade']['Total']          = $this->boolean->count(['toUpgrade' => true]);
		$datas['To_Unlock']['D']               = $this->getGarageBoolean('toUnlock', 'D');
		$datas['To_Unlock']['C']               = $this->getGarageBoolean('toUnlock', 'C');
		$datas['To_Unlock']['B']               = $this->getGarageBoolean('toUnlock', 'B');
		$datas['To_Unlock']['A']               = $this->getGarageBoolean('toUnlock', 'A');
		$datas['To_Unlock']['S']               = $this->getGarageBoolean('toUnlock', 'S');
		$datas['To_Unlock']['Total']           = $this->boolean->count(['toUnlock' => true]);
		$datas['To_Install_Upgrades']['D']     = $this->getGarageBoolean('toInstallUpgrade', 'D');
		$datas['To_Install_Upgrades']['C']     = $this->getGarageBoolean('toInstallUpgrade', 'C');
		$datas['To_Install_Upgrades']['B']     = $this->getGarageBoolean('toInstallUpgrade', 'B');
		$datas['To_Install_Upgrades']['A']     = $this->getGarageBoolean('toInstallUpgrade', 'A');
		$datas['To_Install_Upgrades']['S']     = $this->getGarageBoolean('toInstallUpgrade', 'S');
		$datas['To_Install_Upgrades']['Total'] = $this->boolean->count(['toInstallUpgrade' => true]);
		$datas['To_Install_Commons']['D']      = $this->getGarageBoolean('toInstallCommon', 'D');
		$datas['To_Install_Commons']['C']      = $this->getGarageBoolean('toInstallCommon', 'C');
		$datas['To_Install_Commons']['B']      = $this->getGarageBoolean('toInstallCommon', 'B');
		$datas['To_Install_Commons']['A']      = $this->getGarageBoolean('toInstallCommon', 'A');
		$datas['To_Install_Commons']['S']      = $this->getGarageBoolean('toInstallCommon', 'S');
		$datas['To_Install_Commons']['Total']  = $this->boolean->count(['toInstallCommon' => true]);
		$datas['To_Install_Rares']['D']        = $this->getGarageBoolean('toInstallRare', 'D');
		$datas['To_Install_Rares']['C']        = $this->getGarageBoolean('toInstallRare', 'C');
		$datas['To_Install_Rares']['B']        = $this->getGarageBoolean('toInstallRare', 'B');
		$datas['To_Install_Rares']['A']        = $this->getGarageBoolean('toInstallRare', 'A');
		$datas['To_Install_Rares']['S']        = $this->getGarageBoolean('toInstallRare', 'S');
		$datas['To_Install_Rares']['Total']    = $this->boolean->count(['toInstallRare' => true]);
		$datas['To_Install_Epics']['D']        = $this->getGarageBoolean('toInstallEpic', 'D');
		$datas['To_Install_Epics']['C']        = $this->getGarageBoolean('toInstallEpic', 'C');
		$datas['To_Install_Epics']['B']        = $this->getGarageBoolean('toInstallEpic', 'B');
		$datas['To_Install_Epics']['A']        = $this->getGarageBoolean('toInstallEpic', 'A');
		$datas['To_Install_Epics']['S']        = $this->getGarageBoolean('toInstallEpic', 'S');
		$datas['To_Install_Epics']['Total']    = $this->boolean->count(['toInstallEpic' => true]);

		return $datas;
	}

	/**
	 * @param array<Garage> $entity
	 * @return array
	 */
	public function setLevelUpgradeData(array $entity): array
	{
		$upgrades   = $this->initLevelData();
		$needClassD = $needClassC = $needClassB = $needClassA = $needClassS = 0;
		$doneClassD = $doneClassC = $doneClassB = $doneClassA = $doneClassS = 0;

		foreach ($entity as $garage)
		{
			$class        = $garage->getClass();
			$level        = $garage->getSettingLevel()->getLevel();
			$speed        = $garage->getUpgrade()->getValues()[0]->getSpeed();
			$acceleration = $garage->getUpgrade()->getValues()[0]->getAcceleration();
			$handly       = $garage->getUpgrade()->getValues()[0]->getHandly();
			$nitro        = $garage->getUpgrade()->getValues()[0]->getNitro();
			switch ($class):
				case 'D':
					$needClassD += ($level * 4);
					$doneClassD += $speed + $acceleration + $handly + $nitro;
					break;
				case 'C':
					$needClassC += ($level * 4);
					$doneClassC += $speed + $acceleration + $handly + $nitro;
					break;
				case 'B':
					$needClassB += ($level * 4);
					$doneClassB += $speed + $acceleration + $handly + $nitro;
					break;
				case 'A':
					$needClassA += ($level * 4);
					$doneClassA += $speed + $acceleration + $handly + $nitro;
					break;
				case 'S':
					$needClassS += ($level * 4);
					$doneClassS += $speed + $acceleration + $handly + $nitro;
					break;
			endswitch;
		}

		$upgrades['D']['None']  = ($needClassD - $doneClassD);
		$upgrades['C']['None']  = ($needClassC - $doneClassC);
		$upgrades['B']['None']  = ($needClassB - $doneClassB);
		$upgrades['A']['None']  = ($needClassA - $doneClassA);
		$upgrades['S']['None']  = ($needClassS - $doneClassS);
		$upgrades['Total']['None']  = $upgrades['D']['None'] + $upgrades['C']['None'] + $upgrades['B']['None'] + $upgrades['A']['None'] + $upgrades['S']['None'];
		$upgrades['D']['Done']  = $doneClassD;
		$upgrades['C']['Done']  = $doneClassC;
		$upgrades['B']['Done']  = $doneClassB;
		$upgrades['A']['Done']  = $doneClassA;
		$upgrades['S']['Done']  = $doneClassS;
		$upgrades['Total']['Done']  = $doneClassD + $doneClassC + $doneClassB + $doneClassA + $doneClassS;
		$upgrades['D']['Need']  = $needClassD;
		$upgrades['C']['Need']  = $needClassC;
		$upgrades['B']['Need']  = $needClassB;
		$upgrades['A']['Need']  = $needClassA;
		$upgrades['S']['Need']  = $needClassS;
		$upgrades['Total']['Need']  = $needClassD + $needClassC + $needClassB + $needClassA + $needClassS;

		return $upgrades;
	}

	/**
	 * @param array<Garage> $entity
	 * @return array
	 */
	public function setLevelCommonData(array $entity): array
	{
		$commons    = $this->initLevelData();
		$needClassD = $needClassC = $needClassB = $needClassA = $needClassS = 0;
		$doneClassD = $doneClassC = $doneClassB = $doneClassA = $doneClassS = 0;

		foreach ($entity as $garage)
		{
			$class   = $garage->getClass();
			$default = $garage->getSettingLevel()->getCommon();
			$player  = $garage->getUpgrade()->getValues()[0]->getCommon();
			switch ($class):
				case 'D':
					$needClassD += $default;
					$doneClassD += $player;
					break;
				case 'C':
					$needClassC += $default;
					$doneClassC += $player;
					break;
				case 'B':
					$needClassB += $default;
					$doneClassB += $player;
					break;
				case 'A':
					$needClassA += $default;
					$doneClassA += $player;
					break;
				case 'S':
					$needClassS += $default;
					$doneClassS += $player;
					break;
			endswitch;
		}

		$commons['D']['None']  = ($needClassD - $doneClassD);
		$commons['C']['None']  = ($needClassC - $doneClassC);
		$commons['B']['None']  = ($needClassB - $doneClassB);
		$commons['A']['None']  = ($needClassA - $doneClassA);
		$commons['S']['None']  = ($needClassS - $doneClassS);
		$commons['Total']['None']  = $commons['D']['None'] + $commons['C']['None'] + $commons['B']['None'] + $commons['A']['None'] + $commons['S']['None'];
		$commons['D']['Done']  = $doneClassD;
		$commons['C']['Done']  = $doneClassC;
		$commons['B']['Done']  = $doneClassB;
		$commons['A']['Done']  = $doneClassA;
		$commons['S']['Done']  = $doneClassS;
		$commons['Total']['Done']  = $doneClassD + $doneClassC + $doneClassB + $doneClassA + $doneClassS;
		$commons['D']['Need']  = $needClassD;
		$commons['C']['Need']  = $needClassC;
		$commons['B']['Need']  = $needClassB;
		$commons['A']['Need']  = $needClassA;
		$commons['S']['Need']  = $needClassS;
		$commons['Total']['Need']  = $needClassD + $needClassC + $needClassB + $needClassA + $needClassS;

		return $commons;
	}

	/**
	 * @param array<Garage> $entity
	 * @return array
	 */
	public function setLevelRareData(array $entity): array
	{
		$rares      = $this->initLevelData();
		$needClassD = $needClassC = $needClassB = $needClassA = $needClassS = 0;
		$doneClassD = $doneClassC = $doneClassB = $doneClassA = $doneClassS = 0;

		foreach ($entity as $garage)
		{
			$class   = $garage->getClass();
			$default = $garage->getSettingLevel()->getRare();
			$player  = $garage->getUpgrade()->getValues()[0]->getRare();
			switch ($class):
				case 'D':
					$needClassD += $default;
					$doneClassD += $player;
					break;
				case 'C':
					$needClassC += $default;
					$doneClassC += $player;
					break;
				case 'B':
					$needClassB += $default;
					$doneClassB += $player;
					break;
				case 'A':
					$needClassA += $default;
					$doneClassA += $player;
					break;
				case 'S':
					$needClassS += $default;
					$doneClassS += $player;
					break;
			endswitch;
		}

		$rares['D']['None']  = ($needClassD - $doneClassD);
		$rares['C']['None']  = ($needClassC - $doneClassC);
		$rares['B']['None']  = ($needClassB - $doneClassB);
		$rares['A']['None']  = ($needClassA - $doneClassA);
		$rares['S']['None']  = ($needClassS - $doneClassS);
		$rares['Total']['None']  = $rares['D']['None'] + $rares['C']['None'] + $rares['B']['None'] + $rares['A']['None'] + $rares['S']['None'];
		$rares['D']['Done']  = $doneClassD;
		$rares['C']['Done']  = $doneClassC;
		$rares['B']['Done']  = $doneClassB;
		$rares['A']['Done']  = $doneClassA;
		$rares['S']['Done']  = $doneClassS;
		$rares['Total']['Done']  = $doneClassD + $doneClassC + $doneClassB + $doneClassA + $doneClassS;
		$rares['D']['Need']  = $needClassD;
		$rares['C']['Need']  = $needClassC;
		$rares['B']['Need']  = $needClassB;
		$rares['A']['Need']  = $needClassA;
		$rares['S']['Need']  = $needClassS;
		$rares['Total']['Need']  = $needClassD + $needClassC + $needClassB + $needClassA + $needClassS;

		return $rares;
	}

	/**
	 * @param array<Garage> $entity
	 * @return array
	 */
	public function setLevelEpicData(array $entity): array
	{
		$epics      = $this->initLevelData();
		$needClassD = $needClassC = $needClassB = $needClassA = $needClassS = 0;
		$doneClassD = $doneClassC = $doneClassB = $doneClassA = $doneClassS = 0;

		foreach ($entity as $garage)
		{
			$class   = $garage->getClass();
			$default = $garage->getSettingLevel()->getEpic();
			$player  = $garage->getUpgrade()->getValues()[0]->getEpic();
			switch ($class):
				case 'D':
					$needClassD += $default;
					$doneClassD += $player;
					break;
				case 'C':
					$needClassC += $default;
					$doneClassC += $player;
					break;
				case 'B':
					$needClassB += $default;
					$doneClassB += $player;
					break;
				case 'A':
					$needClassA += $default;
					$doneClassA += $player;
					break;
				case 'S':
					$needClassS += $default;
					$doneClassS += $player;
					break;
			endswitch;
		}

		$epics['D']['None']  = ($needClassD - $doneClassD);
		$epics['C']['None']  = ($needClassC - $doneClassC);
		$epics['B']['None']  = ($needClassB - $doneClassB);
		$epics['A']['None']  = ($needClassA - $doneClassA);
		$epics['S']['None']  = ($needClassS - $doneClassS);
		$epics['Total']['None']  = $epics['D']['None'] + $epics['C']['None'] + $epics['B']['None'] + $epics['A']['None'] + $epics['S']['None'];
		$epics['D']['Done']  = $doneClassD;
		$epics['C']['Done']  = $doneClassC;
		$epics['B']['Done']  = $doneClassB;
		$epics['A']['Done']  = $doneClassA;
		$epics['S']['Done']  = $doneClassS;
		$epics['Total']['Done']  = $doneClassD + $doneClassC + $doneClassB + $doneClassA + $doneClassS;
		$epics['D']['Need']  = $needClassD;
		$epics['C']['Need']  = $needClassC;
		$epics['B']['Need']  = $needClassB;
		$epics['A']['Need']  = $needClassA;
		$epics['S']['Need']  = $needClassS;
		$epics['Total']['Need']  = $needClassD + $needClassC + $needClassB + $needClassA + $needClassS;

		return $epics;
	}

	/**
	 * @param string $table
	 * @param string $class
	 * @return int
	 */
	private function getGarageBoolean(string $table, string $class): int
	{
		$garage = $this->garage->findBy(['class' => $class]);
		return $this->boolean->count([$table => true, 'garage' => $garage]);
	}

	/**
	 * @return int[][]
	 */
	private static function initGarageData(): array
	{
		return [
			'Garage'              => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'Garage'],
			'Lock'                => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'Lock'],
			'Unlock'              => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'Unlock'],
			'Full_Blueprint'      => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'Full Blueprint'],
			'Full_Upgrade'        => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'Full Upgrade'],
			'Gold'                => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'Gold'],
			'To_Upgrade'          => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'To Upgrade'],
			'To_Unlock'           => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'To Unlock'],
			'To_Install_Upgrades' => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'To Install Upgrades'],
			'To_Install_Commons'  => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'To Install Commons'],
			'To_Install_Rares'    => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'To Install Rares'],
			'To_Install_Epics'    => ['D' => 0, 'C' => 0, 'B' => 0, 'A' => 0, 'S' => 0, 'Total' => 0, 'label' => 'To Install Epics'],
		];
	}

	/**
	 * @return int[][]
	 */
	private static function initLevelData(): array
	{
		return [
			'D'     => ['None' => 0, 'Done' => 0, 'Need' => 0],
			'C'     => ['None' => 0, 'Done' => 0, 'Need' => 0],
			'B'     => ['None' => 0, 'Done' => 0, 'Need' => 0],
			'A'     => ['None' => 0, 'Done' => 0, 'Need' => 0],
			'S'     => ['None' => 0, 'Done' => 0, 'Need' => 0],
			'Total' => ['None' => 0, 'Done' => 0, 'Need' => 0],
		];
	}
}




<?php


		// Les voitures débloquées
		$classD = $classC = $classB = $classA = $classS = 0;
		foreach ($booleans as $boolean) {
			if ($boolean->isDebloquer()) {
				if (in_array($boolean->getGarage(), $garageD)) {
					$return['DebloquerD'] = $classD++;
				}
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'C') {
//                  $return['DebloquerC'] = $classC++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'B') {
//                  $return['DebloquerB'] = $classB++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'A') {
//                  $return['DebloquerA'] = $classA++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'S') {
//                  $return['DebloquerS'] = $classS++;
//                }
				$return['Total_Debloquer'] = $classD++;
			}
		}

		// Les voitures Full Upgrade
		$classD = $classC = $classB = $classA = $classS = 0;
//        foreach ($booleans as $boolean) {
//            if ($boolean->isFullUpgrade()) {
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'D') {
//                  $return['FullUpgradeD'] = $classD++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'C') {
//                  $return['FullUpgradeC'] = $classC++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'B') {
//                  $return['FullUpgradeB'] = $classB++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'A') {
//                  $return['FullUpgradeA'] = $classA++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'S') {
//                  $return['FullUpgradeS'] = $classS++;
//                }
//            }
//        }

		// Les voitures Gold
		$classD = $classC = $classB = $classA = $classS = 0;
//        foreach ($booleans as $boolean) {
//            if ($boolean->isGold()) {
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'D') {
//                  $return['GoldD'] = $classD++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'C') {
//                  $return['GoldC'] = $classC++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'B') {
//                  $return['GoldB'] = $classB++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'A') {
//                  $return['GoldA'] = $classA++;
//                }
//
//                if ($boolean->getGarage()->getSettingClass()->getValue() === 'S') {
//                  $return['GoldS'] = $classS++;
//                }
//            }
//        }
//      $return['Total_Debloquer']   = $return["DebloquerD"] + $return["DebloquerC"] + $return["DebloquerB"] + $return["DebloquerA"] + $return["DebloquerS"];
//      $return['Total_FullUpgrade'] = $return["FullUpgradeD"] + $return["FullUpgradeC"] + $return["FullUpgradeB"] + $return["FullUpgradeA"] + $return["FullUpgradeS"];
//      $return['Total_Gold']        = $return["GoldD"] + $return["GoldC"] + $return["GoldB"] + $return["GoldA"] + $return["GoldS"];




<ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item" role="presentation">
		<button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Home</button>
	</li>
	<li class="nav-item" role="presentation">
		<button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">Profile</button>
	</li>
	<li class="nav-item" role="presentation">
		<button class="nav-link" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact-tab-pane" type="button" role="tab" aria-controls="contact-tab-pane" aria-selected="false">Contact</button>
	</li>
	<li class="nav-item" role="presentation">
		<button class="nav-link" id="disabled-tab" data-bs-toggle="tab" data-bs-target="#disabled-tab-pane" type="button" role="tab" aria-controls="disabled-tab-pane" aria-selected="false" disabled>Disabled</button>
	</li>
</ul>
<div class="tab-content" id="myTabContent">
	<div class="tab-pane fade text-white show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">Doner kielbasa pastrami frankfurter venison. Filet mignon bresaola short ribs cupim. Short loin leberkas spare ribs turkey shankle short ribs sirloin, picanha tail ribeye chuck strip steak brisket boudin. Filet mignon ground round hamburger landjaeger brisket beef ribs picanha biltong tenderloin corned beef pork belly venison tongue. Short ribs shank beef beef ribs pork chop.</div>
	<div class="tab-pane fade text-white" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">Turkey short loin beef boudin porchetta, kielbasa alcatra meatball salami. Tenderloin rump biltong ham hock, hamburger leberkas meatloaf tri-tip shoulder pork pastrami frankfurter. Ribeye flank ham hock doner boudin buffalo porchetta sirloin, cupim turducken. Bresaola landjaeger jowl beef. Corned beef pork chislic fatback beef jowl chuck pork chop short loin.</div>
	<div class="tab-pane fade text-white" id="contact-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">Rump frankfurter venison burgdoggen, landjaeger ham hock strip steak ground round kielbasa. Doner meatball chicken kielbasa corned beef rump jowl. Venison pork loin biltong salami kevin strip steak. Ham hock pastrami bacon, turkey venison chuck rump shankle t-bone fatback kevin doner ball tip. Drumstick leberkas shank short loin, ribeye kielbasa pork tri-tip corned beef.</div>
	<div class="tab-pane fade text-white" id="disabled-tab-pane" role="tabpanel" aria-labelledby="disabled-tab" tabindex="0">Cupim chicken cow bacon. Beef ribs short loin pork belly landjaeger flank chislic fatback burgdoggen beef boudin jerky tri-tip drumstick meatloaf. Tri-tip rump porchetta jowl brisket. Landjaeger ham hock meatloaf tenderloin picanha hamburger chicken. Porchetta beef biltong pork belly.</div>
</div>
